#!/usr/bin/env node

var gulp = require('gulp');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var sourcemaps = require('gulp-sourcemaps');
var del = require('del');
var program = require('commander');
var dependencies = require('../lib/dependencies');
var LocalSet = require('../lib/localset');

// Program end
var requiredEnd = require('../lib/footer');

program
  .version('0.0.2')
  .option('-m, --methods <methods>', 'Include methods')
  .option('-l, --lite', 'Create lite build')
  .option('-c, --compat', 'Create compat build')
  .option('-f, --file <file>', 'Load operators from file');

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ rx --methods create,filter,map,flatmap,takeuntil');
  console.log('    $ rx -m create,filter,map,flatmap,takeuntil');
  console.log('');
});

program.parse(process.argv);

var fileLocations = [];

if (program.methods) {
  
  // Expect commas to seperate methods
  var methods = program.methods.split(',');
  if (methods.length === 0) {
    console.log('Methods are required');
    program.help();
  }

  fileLocations = loadMethods(methods);
} else if (program.file) {
  fileLocations = loadMethods(require(program.file).operators);
} else {
  console.log('Methods are required');
  program.help();  
}

function loadMethods(methods) {
  var requiredFiles = new LocalSet(), locations = [];

  methods.forEach(function (method) {
    var method = method.trim().toLowerCase();

    // Check if an alias
    var alias = dependencies.aliases[method];
    if (alias) {
      method = alias;
    }

    recursivelyAdd(method);

    function recursivelyAdd(m) {
      if (requiredFiles.add(m)) {

        console.log('Adding operator %s', m);

        // Check the source
        var methodData = dependencies.operators[m];
        if (!m) {
          console.log('Method not found: '+m);
          program.help();
        }

        locations.push.apply(locations, methodData.source);

        // Run the dependencies
        methodData.dependsOn.forEach(function (d) {
          recursivelyAdd(d);
        });
      } 
    }
  });

  return locations;  
}

var requiredStart;
if (program.compat && program.lite) {
  requiredStart = require('../lib/headerlitecompat');
} else if (program.compat && !program.lite) {
  requiredStart = require('../lib/headercompat');
} else if (!program.compat && program.lite) {
  requiredStart = require('../lib/headerlite');
} else {
  requiredStart = require('../lib/header');
}

var totalFiles = requiredStart.concat(fileLocations, requiredEnd);

var outputFile = 'rx.custom.js';
var outputMinFile = 'rx.custom.min.js';

gulp.task('clean', function(cb) {
  del(['build'], cb);
});

gulp.task('concat', ['clean'], function() {
  return gulp.src(totalFiles)
    .pipe(concat(outputFile))
    .pipe(gulp.dest('build'));
});

gulp.task('minify', ['concat'], function () {
  return gulp.src(['build/' + outputFile])
    .pipe(uglify())
    .pipe(concat(outputMinFile))
    .pipe(gulp.dest('build'));
});

gulp.task('default', ['minify']);

// Start the build!
gulp.start('default');
#!/usr/bin/env node

var gulp = require('gulp');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var del = require('del');
var program = require('commander');
var dependencies = require('../lib/dependencies.json');

// Program end
var requiredEnd = require('../lib/footer');

program
  .version('0.0.1')
  .option('-m, --methods <methods>', 'Include methods')
  .option('-c, --compat', 'Create compat build');

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ cli --methods create,filter,map,flatmap,takeuntil');
  console.log('    $ cli -m create,filter,map,flatmap,takeuntil');
  console.log('');
});

program.parse(process.argv);

var requiredFiles = [];
if (program.methods) {
  
  // Expect commas to seperate methods
  var files = program.methods.split(',');

  for (var i = 0, len = files.length; i < len; i++) {
    var file = files[i];

    // TODO: Add each file
  }
}

var requiredStart = program.compat ?
  require('../lib/headercompat') :
  require('../lib/header');

var totalFiles = requiredStart.concat(requiredFiles, requiredEnd);

var outputFile = 'rx.custom.js';
var outputMinFile = 'rx.custom.min.js';

gulp.task('clean', function(cb) {
  // You can use multiple globbing patterns as you would with `gulp.src`
  del(['build'], cb);
});

gulp.task('concat', ['clean'], function() {
  return gulp.src(totalFiles)
    .pipe(concat(outputFile))
    .pipe(gulp.dest('build'));
});

gulp.task('minify', ['concat'], function () {
  return gulp.src(['build/' + outputFile])
    .pipe(uglify())
    .pipe(concat(outputMinFile))
    .pipe(gulp.dest('build'));
});

gulp.task('default', ['minify']);

gulp.run('default');